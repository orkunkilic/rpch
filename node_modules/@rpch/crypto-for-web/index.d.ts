/* tslint:disable */
/* eslint-disable */
/**
* @param {Envelope} request
* @param {Identity} exit_node
* @returns {Session}
*/
export function box_request(request: Envelope, exit_node: Identity): Session;
/**
* @param {Envelope} message
* @param {Identity} my_id
* @param {bigint} client_last_request_ts
* @returns {Session}
*/
export function unbox_request(message: Envelope, my_id: Identity, client_last_request_ts: bigint): Session;
/**
* @param {Session} session
* @param {Envelope} response
*/
export function box_response(session: Session, response: Envelope): void;
/**
* @param {Session} session
* @param {Envelope} message
* @param {bigint} exit_last_response_ts
*/
export function unbox_response(session: Session, message: Envelope, exit_last_response_ts: bigint): void;
/**
*/
export function set_panic_hook(): void;
/**
*/
export class Envelope {
  free(): void;
/**
* @param {Uint8Array} message
* @param {string} entry_peer_id
* @param {string} exit_peer_id
*/
  constructor(message: Uint8Array, entry_peer_id: string, exit_peer_id: string);
}
/**
*/
export class Identity {
  free(): void;
/**
* @param {Uint8Array} public_key
* @param {Uint8Array | undefined} private_key
* @returns {Identity}
*/
  static load_identity(public_key: Uint8Array, private_key?: Uint8Array): Identity;
}
/**
*/
export class Session {
  free(): void;
/**
* @returns {Uint8Array}
*/
  get_request_data(): Uint8Array;
/**
* @returns {Uint8Array}
*/
  get_response_data(): Uint8Array;
/**
* @returns {bigint}
*/
  updated_counter(): bigint;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_session_free: (a: number) => void;
  readonly session_get_request_data: (a: number, b: number) => void;
  readonly session_get_response_data: (a: number, b: number) => void;
  readonly session_updated_counter: (a: number) => number;
  readonly __wbg_identity_free: (a: number) => void;
  readonly identity_load_identity: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly __wbg_envelope_free: (a: number) => void;
  readonly envelope_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly box_request: (a: number, b: number, c: number) => void;
  readonly unbox_request: (a: number, b: number, c: number, d: number) => void;
  readonly box_response: (a: number, b: number, c: number) => void;
  readonly unbox_response: (a: number, b: number, c: number, d: number) => void;
  readonly set_panic_hook: () => void;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_exn_store: (a: number) => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {SyncInitInput} module
*
* @returns {InitOutput}
*/
export function initSync(module: SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
